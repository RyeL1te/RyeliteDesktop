name: Build/release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - staging

permissions:
  contents: write

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Get version from package.json
        id: get_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  build:
    needs: get_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: lts/jod
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install Package Dependencies
        run: npm install
      
      - name: Build
        run: npm run build
      
      - name: Package Application
        run: npm run release
        if: ${{ !env.ACT }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: build-${{ matrix.os }}
          path: |
            dist/*${{ needs.get_version.outputs.version }}*.exe
            dist/*${{ needs.get_version.outputs.version }}*.dmg
            dist/*${{ needs.get_version.outputs.version }}*.AppImage

  release:
    needs: [build, get_version]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' || github.ref_name == 'staging' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download all artifacts
        if: ${{ !env.ACT }}
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files (for debugging)
        if: ${{ !env.ACT }}
        run: ls -R dist

      - name: Determine Release Properties
        id: release_props
        run: |
          VERSION="${{ needs.get_version.outputs.version }}"
          # Check if this was triggered by a tag push (e.g., v0.1.0)
          if [[ "${{ github.ref_type }}" == 'tag' ]]; then
            echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          # Check if this was triggered by a push to the staging branch
          elif [[ "${{ github.ref_name }}" == 'staging' ]]; then
            # Create a staging tag like v0.1.0-beta.123 (using run number for uniqueness)
            STAGING_TAG="v${VERSION}-beta.${{ github.run_number }}"
            echo "TAG_NAME=${STAGING_TAG}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Staging Build ${STAGING_TAG}" >> $GITHUB_OUTPUT
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            # Fallback for manual dispatch (treat as test pre-release)
            TEST_TAG="v${VERSION}-test.${{ github.run_id }}"
            echo "TAG_NAME=${TEST_TAG}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Test Build ${TEST_TAG}" >> $GITHUB_OUTPUT
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create_release
        if: ${{ !env.ACT }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.release_props.outputs.TAG_NAME }}
          release_name: ${{ steps.release_props.outputs.RELEASE_NAME }}
          draft: false
          prerelease: ${{ steps.release_props.outputs.PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        if: ${{ !env.ACT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/build-windows-latest/RyeLite Setup ${{ needs.get_version.outputs.version }}.exe
          asset_name: RyeLite-Setup-${{ needs.get_version.outputs.version }}.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        if: ${{ !env.ACT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/build-macos-latest/RyeLite-${{ needs.get_version.outputs.version }}.dmg
          asset_name: RyeLite-${{ needs.get_version.outputs.version }}.dmg
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        if: ${{ !env.ACT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/build-ubuntu-latest/RyeLite-${{ needs.get_version.outputs.version }}.AppImage
          asset_name: RyeLite-${{ needs.get_version.outputs.version }}.AppImage
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Expected Filenames for ACT
        if: ${{ env.ACT }}
        run: |
          echo "--- ACT Local Test Output ---"
          echo "Version: ${{ needs.get_version.outputs.version }}"
          echo "Calculated Tag Name: ${{ steps.release_props.outputs.TAG_NAME }}"
          echo "Calculated Release Name: ${{ steps.release_props.outputs.RELEASE_NAME }}"
          echo "Calculated Prerelease Status: ${{ steps.release_props.outputs.PRERELEASE }}"
          echo "--- Expected Asset Names ---"
          echo "Windows: RyeLite-Setup-${{ needs.get_version.outputs.version }}.exe"
          echo "macOS: RyeLite-${{ needs.get_version.outputs.version }}.dmg"
          echo "Linux: RyeLite-${{ needs.get_version.outputs.version }}.AppImage"
          echo "--- NOTE: Actual file paths depend on local build output in 'dist/' ---"